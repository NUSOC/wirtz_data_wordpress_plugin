<style>
    .error {
        border: 1px solid #FF0000;
        /* Red outline */
        background-color: #FFC080;
        /* Slightly lighter red background */
        color: #FF0000;
        /* Corresponding font color (red) */
        padding: 1em;
    }

    input,
    label,
    select {
        font-family: Manrope, sans-serif;
        font-size: 22px;
    }


    tbody {
        width: 1000px;
        border: 1px solid red;
    }
</style>


{% if error %}
<div class="error">
    <p>{{ error }}</p>
</div>
{% endif %}

<p>
<form action="{{ returnPage }}" method="get">


    <table>
        <tr>
            <td width="20%">
                <label for="first">First Name:</label>
            </td>
            <td>
                <input type="text" id="first" name="first" value="{{ first is defined ? first : '' }}"
                    placeholder="Search first name" aria-label="Search by first name">
                <button type="button" onclick="document.getElementById('first').value=''"
                    aria-label="Clear first name field">Clear</button>
            </td>
        </tr>
        <tr>
            <td>
                <label for="last">Last Name:</label>
            </td>
            <td>
                <input type="text" id="last" name="last" value="{{ last|default('') }}" placeholder="Search last name"
                    aria-label="Search by last name">
                <button type="button" onclick="document.getElementById('last').value=''"
                    aria-label="Clear last name field">Clear</button>

            </td>
        </tr>
        <tr>
            <td>
                <label for="production">Production:</label>
            </td>
            <td>
                <input type="text" id="production" name="production" value="{{ production|default('') }}"
                    placeholder="Search by Production" aria-label="Search by production name">
                <button type="button" onclick="document.getElementById('production').value=''"
                    aria-label="Clear production field">Clear</button>

            </td>
        </tr>
        <tr>
            <td>
                <label for="team">Team:</label>
            </td>
            <td>
                <input type="text" id="team" name="team" value="{{ team|default('') }}" placeholder="Search by Team"
                    aria-label="Search by team">
                <button type="button" onclick="document.getElementById('team').value=''"
                    aria-label="Clear team field">Clear</button>
            </td>
        </tr>
    </table>


    <br />
    <label for="sort">Sort By:</label>
    <select name="sort" id="" aria-live="polite">
        <option value="first">First</option>
        <option value="last">Last</option>
        <option value="year">Year</option>
        <option value="production">Production</option>
    </select>
    <input type="submit" value="Submit" aria-label="Submit the form">
</form>



<h3>Search Results</h3>

<p>There are {{ people|length }} records from this search.</p>


<style>
    th.sorted {
        background-color: #d0e0f0;
    }

    td.sorted {
        background-color: #f0f8ff;
    }
</style>

<table>
    <thead>
        <tr style="background-color: gray;">
            <th>First</th>
            <th>Last</th>
            <th>Team</th>
            <th>Role</th>
            <th>Grad</th>
            <th>Career</th>
            <th>Year</th>
            <th>Prod</th>
        </tr>
    </thead>
    <tbody>
        {% for person in people %}
        {% set color = loop.index0 is even ? 'white' : 'lightgray' %}
        <tr style="background-color: {{ color }};">
            <td>{{ person.First }}</td>
            <td>{{ person.Last }}</td>
            <td>
                {% if person.Team %}
                <a href="{{ returnPage }}?{{ _get|merge({'team': person.Team})|url_encode }}">{{ person.Team }}</a>
                {% else %}
                &nbsp;
                {% endif %}
            </td>
            <td>{{ person.Role }}</td>
            <td>{{ person.Grad }}</td>
            <td>{{ person.Career }}</td>
            <td>{{ person.Year }}</td>
            <td>
                {% if person.Production %}
                <a href="{{ returnPage }}?production={{ person.Production|url_encode }}">{{ person.Production }}</a>
                {% else %}
                &nbsp;
                {% endif %}
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>

<script>
    // Wait for the page to fully load before running this code
    document.addEventListener('DOMContentLoaded', function () {
        // Helper function to get the text content from a table cell
        const getCellValue = (tr, idx) => tr.children[idx].innerText || tr.children[idx].textContent;

        // Function to compare two values for sorting
        // Handles both numbers and text
        const comparer = (idx, asc) => (a, b) => ((v1, v2) =>
            v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ?
                v1 - v2 : v1.toString().localeCompare(v2)
        )(getCellValue(asc ? a : b, idx), getCellValue(asc ? b : a, idx));

        // Remove sort arrows and highlighting from previous sorts
        const clearIndicators = (thElements, table) => {
            thElements.forEach(th => {
                th.innerText = th.innerText.replace(/[\u2191\u2193]/g, '').trim();
                th.classList.remove('sorted');
            });
            table.querySelectorAll('td').forEach(td => td.classList.remove('sorted'));
        };

        // Add click handlers to all table headers
        document.querySelectorAll('th').forEach((th, index) => {
            // Make headers look clickable
            th.style.cursor = 'pointer';
            
            // What happens when header is clicked
            th.addEventListener('click', function () {
                // Find the table and its body
                const table = th.closest('table');
                const tbody = table.querySelector('tbody') || table;
                const ths = Array.from(th.parentNode.children);
                
                // Toggle sort direction
                const asc = !this.asc;
                this.asc = asc;

                // Clear old sort indicators
                clearIndicators(ths, table);
                
                // Add arrow to show sort direction
                th.innerText = th.innerText.trim() + (asc ? ' ↑' : ' ↓');
                th.classList.add('sorted');

                // Sort the table rows
                Array.from(tbody.querySelectorAll('tr'))
                    .sort(comparer(index, asc))
                    .forEach(tr => {
                        // Move rows to new positions
                        tbody.appendChild(tr);
                        // Highlight sorted column
                        tr.querySelectorAll('td').forEach((td, i) => {
                            if (i === index) td.classList.add('sorted');
                        });
                    });
            });
        });
    });
</script>






</p>